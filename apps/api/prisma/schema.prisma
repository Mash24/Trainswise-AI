generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  WORKER
  CLIENT
}

enum TaskStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskType {
  TEXT_ANNOTATION
  IMAGE_ANNOTATION
  DATA_ENTRY
  TRANSCRIPTION
  MODERATION
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio       String?
  location  String?
  skills    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Task {
  id          String         @id @default(uuid())
  title       String
  description String
  type        TaskType
  difficulty  TaskDifficulty
  status      TaskStatus     @default(OPEN)
  reward      Float
  deadline    DateTime?
  clientId    String
  client      User           @relation("ClientTasks", fields: [clientId], references: [id])
  workerId    String?
  worker      User?          @relation("WorkerTasks", fields: [workerId], references: [id])
  submissions Submission[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([clientId])
  @@index([workerId])
}

model Submission {
  id          String           @id @default(uuid())
  taskId      String
  task        Task             @relation(fields: [taskId], references: [id])
  workerId    String
  worker      User             @relation(fields: [workerId], references: [id])
  status      SubmissionStatus @default(PENDING)
  content     Json
  review      Review?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([taskId])
  @@index([workerId])
}

model Review {
  id            String   @id @default(uuid())
  submissionId  String   @unique
  submission    Submission @relation(fields: [submissionId], references: [id])
  reviewerId    String
  reviewer      User     @relation(fields: [reviewerId], references: [id])
  feedback      String
  score         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([reviewerId])
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String?
  role          UserRole       @default(CLIENT)
  profile       Profile?
  refreshTokens RefreshToken[]
  clientTasks   Task[]         @relation("ClientTasks")
  workerTasks   Task[]         @relation("WorkerTasks")
  submissions   Submission[]
  reviews       Review[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
} 