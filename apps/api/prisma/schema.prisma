generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String?
  location  String?
  skills    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Task {
  id          String         @id @default(uuid())
  title       String
  description String
  type        TaskType
  difficulty  TaskDifficulty
  status      TaskStatus     @default(OPEN)
  reward      Float
  deadline    DateTime?
  clientId    String
  workerId    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  submissions Submission[]
  client      User           @relation("ClientTasks", fields: [clientId], references: [id])
  worker      User?          @relation("WorkerTasks", fields: [workerId], references: [id])

  @@index([clientId])
  @@index([workerId])
}

model Submission {
  id        String           @id @default(uuid())
  taskId    String
  workerId  String
  status    SubmissionStatus @default(PENDING)
  content   Json
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  review    Review?
  task      Task             @relation(fields: [taskId], references: [id])
  worker    User             @relation(fields: [workerId], references: [id])

  @@index([taskId])
  @@index([workerId])
}

model Review {
  id           String     @id @default(uuid())
  submissionId String     @unique
  reviewerId   String
  feedback     String
  score        Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  reviewer     User       @relation(fields: [reviewerId], references: [id])
  submission   Submission @relation(fields: [submissionId], references: [id])

  @@index([reviewerId])
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String?
  role          UserRole       @default(CLIENT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  profile       Profile?
  refreshTokens RefreshToken[]
  reviews       Review[]
  submissions   Submission[]
  clientTasks   Task[]         @relation("ClientTasks")
  workerTasks   Task[]         @relation("WorkerTasks")
}

enum UserRole {
  ADMIN
  WORKER
  CLIENT
}

enum TaskStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskType {
  TEXT_ANNOTATION
  IMAGE_ANNOTATION
  DATA_ENTRY
  TRANSCRIPTION
  MODERATION
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
}
