// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole  @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  tasks         Task[]
  clientTasks   Task[]    @relation("ClientTasks")
  submissions   Submission[]
  reviews       Review[]
  refreshTokens RefreshToken[]
  notifications Notification[]
  wallet        Wallet?
  transactions  Transaction[]
}

model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  bio           String?
  skills        String[]
  rating        Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String
  type          TaskType
  status        TaskStatus @default(OPEN)
  difficulty    TaskDifficulty
  reward        Float
  deadline      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  assignedTo    User?     @relation(fields: [assignedToId], references: [id])
  assignedToId  String?
  client        User      @relation("ClientTasks", fields: [clientId], references: [id])
  clientId      String
  submissions   Submission[]
  reviews       Review[]
}

model Submission {
  id            String    @id @default(cuid())
  taskId        String
  task          Task      @relation(fields: [taskId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  content       String
  status        SubmissionStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  reviews       Review[]
}

model Review {
  id            String    @id @default(cuid())
  taskId        String
  task          Task      @relation(fields: [taskId], references: [id])
  submissionId  String
  submission    Submission @relation(fields: [submissionId], references: [id])
  reviewerId    String
  reviewer      User      @relation(fields: [reviewerId], references: [id])
  score         Int
  feedback      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  title     String
  message   String
  metadata  Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  balance       Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transactions  Transaction[]
}

model Transaction {
  id            String    @id @default(cuid())
  walletId      String
  wallet        Wallet    @relation(fields: [walletId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  amount        Float
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  WORKER
  CLIENT
  USER
  REVIEWER
}

enum TaskType {
  TEXT_ANNOTATION
  IMAGE_ANNOTATION
  DATA_ENTRY
  TRANSCRIPTION
  MODERATION
}

enum TaskStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  SUBMITTED
  COMPLETED
  REJECTED
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TASK_REWARD
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
} 